#include <iostream>
#include <fstream>

void generateKaratsubaVerilog(int N) {
    std::ofstream verilogFile("karatsuba_multiplier.v");
    verilogFile << "module sm(\n"
                   "            output reg [" << N+2 << ":0] prod,\n"
                   "            input [" << int((N+1)/2) << ":0] a,\n"
                   "            input [" << int((N+1)/2) << ":0] b\n"
                   ");\n"
                   "            reg ["<< N+2 << ":0] result = "<< N+3 << "'b0;\n"
                   "            reg [2:0] i;\n"
                   "\n"
                   "            always @(*)\n"
                   "            begin\n"
                   "                for(i=0;i<"<< int((N+1)/2)+1 << ";i=i+1)\n"
                   "                begin\n"
                   "                    if((b&(1<<<i))!=0)\n"
                   "                    begin\n"
                   "                        result = result+(a<<<i);\n"
                   "                    end\n"
                   "\n"
                   "                end\n"
                   "            prod = result;\n"
                   "          end\n"
                   "endmodule\n"
                   "\n"
                   "module karatsuba_mult (\n"
                   "  input ["<<  N-1 << ":0] x,\n"
                   "  input ["<<  N-1 << ":0] y,\n"
                   "  output reg ["<<  2*N-1 << ":0] result,\n"
                   "  output wire ["<<  2*N-1 << ":0] prom1_tb,\n"
                   "  output wire ["<<  2*N-1 << ":0] prom2_tb\n"
                   "  );\n"
                   "\n"
                   "  reg [" << int((N+1)/2) << ":0] x0, x1, y0, y1, xs, ys;\n"
                   "  wire [" << N + 2 << ":0] z0, z1, z2;\n"
                   "  reg ["<<  N-1 << ":0] z3;\n"
                   "  reg ["<<  2*N-1 << ":0] prom1, prom2;\n"
                   "  always @(*) begin\n"
                   "    x1 = x[" << N-1 << ":" << int((N+1)/2) << "];\n"
                   "    x0 = x[" << int((N+1)/2) << ":0];\n"
                   "    y1 = y[" << N-1 << ":" << int((N+1)/2) << "];\n"
                   "    y0 = y[" << int((N+1)/2) << ":0];\n"
                   "    xs = x1 + x0;\n"
                   "    ys = y1 + y0;\n"
                   "  end\n"
                   "\n"
                   "  sm mO( .a(x0), .b(y0), .prod(z0));\n"
                   "  sm m2( .a(x1), .b(y1), .prod(z2));\n"
                   "  sm m1( .a (xs), .b(ys), .prod(z1));\n"
                   "  always @(*) begin\n"
                   "    z3 = z1 - z2 - z0;\n"
                   "    prom1 = z3 << " << int((N+1)/2) << ";\n"
                   "    prom2 = z2 << " << N << ";\n"
                   "  end\n"
                   "\n"
                   "  always @(*) begin\n"
                   "    result = {prom2 + prom1 + z0};\n"
                   "  end\n"
                   "  assign prom1_tb = prom1;\n"
                   "  assign prom2_tb = prom2;\n"
                   "endmodule\n"
                   "\n"
                   "module simple_karatsuba_multiplier_tb;\n"
                   "  reg [" << N-1 << ":0] a;\n"
                   "  reg [" << N-1 << ":0] b;\n"
                   "  wire [" << 2*N-1 << ":0] result;\n"
                   "  wire [" << 2*N-1 << ":0] prom1_tb, prom2_tb;\n"
                   "\n"
                   "  karatsuba_mult uut (\n"
                   "    .x(a),\n"
                   "    .y(b),\n"
                   "    .result(result),\n"
                   "    .prom1_tb(prom1_tb),\n"
                   "    .prom2_tb(prom2_tb)\n"
                   "    );\n"
                   "\n"
                   "  initial begin\n"
                   "    // Test values\n"
                   "    a = 8'b11001010;\n"
                   "    b = 8'b00000101;\n"
                   "\n"
                   "    // Wait for a while\n"
                   "    #100;\n"
                   "\n"
                   "    // Display results\n"
                   "    $display(\"Input a: %d\", a);\n"
                   "    $display(\"Input b: %d\", b);\n"
                   "    #100;\n"
                   "    $display(\"Result: %d\", result);\n"
                   "    // Finish simulation\n"
                   "    $finish;\n"
                   "  end\n"
                   "endmodule\n";
}


int main() {
    int N;
    std::cout << "Enter the value of N: ";
    std::cin >> N;
    generateKaratsubaVerilog(N+1);
    std::cout << "Verilog files generated successfully.\n";

    return 0;
}
